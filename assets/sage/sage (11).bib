@article{doi:10.1177/1475725716659252,
author = {Nicole D. Anderson},
title = {A Call for Computational Thinking in Undergraduate Psychology},
journal = {Psychology Learning & Teaching},
volume = {15},
number = {3},
pages = {226–234},
year = {2016a},
doi = {10.1177/1475725716659252},
URL = {https://doi-org.crai.referencistas.com/10.1177/1475725716659252},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1475725716659252},
abstract = {Computational thinking is an approach to problem solving that is typically employed by computer programmers. The advantage of this approach is that solutions can be generated through algorithms that can be implemented as computer code. Although computational thinking has historically been a skill that is exclusively taught within computer science, there has been a more recent movement to introduce these skills within other disciplines. Psychology is an excellent example of a discipline that would benefit from computational thinking skills because of the nature of questions that are typically asked within the discipline. However, there has not been a formal curriculum proposed to teach computational thinking within psychology and the behavioural sciences. I will argue that computational thinking is a fundamental skill that can easily be introduced to psychology students throughout their undergraduate education. This would provide students with the skills necessary to become successful researchers, and would also provide a practical and marketable skill to all psychology graduates.}
}

@article{doi:10.3233/JID-220009,
author = {Duncan Anthony Coulter},
title = {The convergence of computational thinking, computational intelligence, and multi-agency},
journal = {Journal of Integrated Design and Process Science},
volume = {26},
number = {3–4},
pages = {369–391},
year = {2022b},
doi = {10.3233/JID-220009},
URL = {https://doi-org.crai.referencistas.com/10.3233/JID-220009},
eprint = {https://doi-org.crai.referencistas.com/10.3233/JID-220009},
abstract = {The design of real-world industrial systems is subject to a natural tendency towards modularization in order to manage complexity. In addition, this article considers that patterns of self-similarity in many problem domains have made many such solutions naturally representable as holarchies. Likewise, the increasing need for autonomous local decision making as well as the demand to produce solutions at scale has increased the relevance of the multi-agent paradigm to the creation of modern software systems. A variety of software development patterns are explored for their compatibility with holonic multi-agency. The current skill sets required by software development workers and concomitant training activities focus on instilling computational thinking abilities, a set of related cognitive competencies useful in the development of such systems. Intelligent systems play an increasingly important role in modern development and often benefit from computational intelligence techniques for the purpose of parameter tuning. This position paper explores the intersections between holonic multi-agency, modern information systems development, the computational intelligence which train them and the computational thinking skills those developers should be trained in.}
}

@article{doi:10.1177/07356331221081753,
author = {Laila El-Hamamsy and María Zapata-Cáceres and Estefanía Martín Barroso and Francesco Mondada and Jessica Dehler Zufferey and Barbara Bruno},
title = {The Competent Computational Thinking Test: Development and Validation of an Unplugged Computational Thinking Test for Upper Primary School},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {7},
pages = {1818–1866},
year = {2022c},
doi = {10.1177/07356331221081753},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221081753},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221081753},
abstract = {With the increasing importance of Computational Thinking (CT) at all levels of education, it is essential to have valid and reliable assessments. Currently, there is a lack of such assessments in upper primary school. That is why we present the development and validation of the competent CT test (cCTt), an unplugged CT test targeting 7–9 year-old students. In the first phase, 37 experts evaluated the validity of the cCTt through a survey and focus group. In the second phase, the test was administered to 1519 students. We employed Classical Test Theory, Item Response Theory, and Confirmatory Factor Analysis to assess the instruments’ psychometric properties. The expert evaluation indicates that the cCTt shows good face, construct, and content validity. Furthermore, the psychometric analysis of the student data demonstrates adequate reliability, difficulty, and discriminability for the target age groups. Finally, shortened variants of the test are established through Confirmatory Factor Analysis. To conclude, the proposed cCTt is a valid and reliable instrument, for use by researchers and educators alike, which expands the portfolio of validated CT assessments across compulsory education. Future assessments looking at capturing CT in a more exhaustive manner might consider combining the cCTt with other forms of assessments.}
}

@article{doi:10.1177/07356331221134423,
author = {Ndudi O. Ezeamuzie},
title = {Abstractive-Based Programming Approach to Computational Thinking: Discover, Extract, Create, and Assemble},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {3},
pages = {605–638},
year = {2023d},
doi = {10.1177/07356331221134423},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221134423},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221134423},
abstract = {Most studies suggest that students develop computational thinking (CT) through learning programming. However, when the target of CT is decoupled from programming, emerging evidence challenges the assertion of CT transferability from programming. In this study, CT was operationalized in everyday problem-solving contexts in a learning experiment (n = 59) that investigated whether learning programming enhances students’ CT skills. Specifically, this study examined the influence of a novel, systematic and micro instructional strategy that is grounded in abstraction and comprised of four independent but related processes – discover, extract, create, and assemble (DECA) towards simplification of problem-solving. Subsidiary questions explored the effects of students’ age, gender, computer proficiency, and prior programming experience on the development of CT. No significant difference was found between the CT skill and programming knowledge of the groups at the posttest. However, within-group paired t-tests showed that the experimental group that integrated DECA had significant improvement in CT but not in the control group across the pretest-posttest axis. Implications of the inconclusive finding about the transfer of programming skills to CT are emphasized and the arguments for disentangling CT from programming are highlighted.}
}

@article{doi:10.1177/07356331211033158,
author = {Ndudi O. Ezeamuzie and Jessica S. C. Leung},
title = {Computational Thinking Through an Empirical Lens: A Systematic Review of Literature},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {2},
pages = {481–511},
year = {2022e},
doi = {10.1177/07356331211033158},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211033158},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211033158},
abstract = {This article provides an overview of the diverse ways in which computational thinking has been operationalised in the literature. Computational thinking has attracted much interest and debatably ranks in importance with the time-honoured literacy skills of reading, writing, and arithmetic. However, learning interventions in this subject have modelled computational thinking differently. We conducted a systematic review of 81 empirical studies to examine the nature, explicitness, and patterns of definitions of computational thinking. Data analysis revealed that most of the reviewed studies operationalised computational thinking as a composite of programming concepts and preferred definitions from assessment-based frameworks. On the other hand, a substantial number of the studies did not establish the meaning of computational thinking when theorising their interventions nor clearly distinguish between computational thinking and programming. Based on these findings, this article proposes a model of computational thinking that focuses on algorithmic solutions supported by programming concepts which advances the conceptual clarity between computational thinking and programming.}
}

@article{doi:10.1177/0735633120965919,
author = {Danial Hooshyar and Margus Pedaste and Yeongwook Yang and Liina Malva and Gwo-Jen Hwang and Minhong Wang and Heuiseok Lim and Dejan Delev},
title = {From Gaming to Computational Thinking: An Adaptive Educational Computer Game-Based Learning Approach},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {3},
pages = {383–409},
year = {2021f},
doi = {10.1177/0735633120965919},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120965919},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120965919},
abstract = {Educational games have been increasingly used to improve students’ computational thinking. However, most existing games have focused on the theoretical knowledge of computational thinking, ignoring the development of computational thinking skills. Moreover, there is a lack of integration of adaptivity into educational computer games for computational thinking, which is crucial to addressing individual needs in developing computational thinking skills. In this study, we present an adaptive educational computer game, called AutoThinking, for developing students’ computational thinking skills in addition to their conceptual knowledge. To evaluate the effects of the game, we conducted an experimental study with 79 elementary school students in Estonia, where the experimental group learned with AutoThinking, while the control group used a traditional technology-enhanced learning approach. Our findings show that learning with the adaptive educational computer game significantly improved students’ computational thinking related to both conceptual knowledge and skills. Moreover, students using the adaptive educational computer game showed a significantly higher level of interest, satisfaction, flow state, and technology acceptance in learning computational thinking. Implications of the findings are also discussed.}
}

@article{doi:10.1177/0735633120972050,
author = {Ugur Kale and Jiangmei Yuan},
title = {Still a New Kid on the Block? Computational Thinking as Problem Solving in Code.org},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {4},
pages = {620–644},
year = {2021g},
doi = {10.1177/0735633120972050},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120972050},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120972050},
abstract = {Computational thinking is a means to understand and solve complex problems through using computer science concepts and techniques. While there is an increase in the number of initiatives focusing on coding, whether they (a) address computational thinking and problem-solving skills and (b) use methods of teaching problem solving is yet to be explored. As a preliminary step, this study focuses on examining 3rd grade lesson plans at Code.org. The analysis identified various components of computational thinking and problem solving as well as specific problem-solving teaching methods used to address these skills. Besides such cognitive outcomes, the findings also revealed affective, reflective, and social aspects of learning supported in the lessons.}
}

@article{doi:10.1177/21582440211016418,
author = {Vance Kite and Soonhye Park and Eric Wiebe},
title = {The Code-Centric Nature of Computational Thinking Education: A Review of Trends and Issues in Computational Thinking Education Research},
journal = {Sage Open},
volume = {11},
number = {2},
pages = {21582440211016416},
year = {2021h},
doi = {10.1177/21582440211016418},
URL = {https://doi-org.crai.referencistas.com/10.1177/21582440211016418},
eprint = {https://doi-org.crai.referencistas.com/10.1177/21582440211016418},
abstract = {Computational thinking (CT) is being recognized as a critical component of student success in the digital era. Many contend that integrating CT into core curricula is the surest method for providing all students with access to CT. However, the CT community lacks an agreed-upon conceptualization of CT that would facilitate this integration, and little effort has been made to critically analyze and synthesize research on CT/content integration (CTCI). Conflicting CT conceptualizations and little understanding of evidence-based strategies for CTCI could result in significant barriers to increasing students’ access to CT. To address these concerns, we analyzed 80 studies on CT education, focusing on both the CT conceptualizations guiding current CT education research and evidence-based strategies for CTCI. Our review highlights the code-centric nature of CT education and reveals significant gaps in our understanding of CTCI and CT professional development for teachers. Based on these findings, we propose an approach to operationalizing CT that promotes students’ participation in CT, present promising methods for infusing content with CT, and discuss future directions for CT education research.}
}

@article{doi:10.1177/07356331221121052,
author = {Rina PY Lai and Michelle R Ellefson},
title = {How Multidimensional is Computational Thinking Competency? A Bi-Factor Model of the Computational Thinking Challenge},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {2},
pages = {259–282},
year = {2023i},
doi = {10.1177/07356331221121052},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221121052},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221121052},
abstract = {Computational thinking (CT) is an emerging and multifaceted competence important to the computing era. However, despite the growing consensus that CT is a competence domain, its theoretical and empirical account remain scarce in the current literature. To address this issue, rigorous psychometric evaluation procedures were adopted to investigate the structure of CT competency, as measured by Computational Thinking Challenge (Lai, 2021a), in a large sample of 1,130 British secondary school students (Mage = 14.14 years, SDage = 1.45). Based on model comparison from an exploratory multidimensional item response theory approach, the results supported the multidimensional operationalization of CT competency. A confirmatory bi-factor item response theory model further suggested CT competency is comprised of a general CT competency factor and two specific factors for programming and non-programming problem-solving. Despite the multidimensionality, the common variance is largely explained by a primary general factor of CT competency, thus the use of a single scale score is recommended. Psychometric evaluation from the bi-factor model indicated good psychometric properties of the assessment tool. Overall, the bi-factor model provides a useful approach to investigating CT competency and serves as a robust test validation tool.}
}

@article{doi:10.1177/07356331241242435,
author = {Tongxi Liu},
title = {Relationships Between Executive Functions and Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {5},
pages = {1267–1301},
year = {2024j},
doi = {10.1177/07356331241242435},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241242435},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241242435},
abstract = {Addressing cognitive disparities has become a paramount concern in computational thinking (CT) education. The intricate and nuanced relationships between CT and cognitive variations emphasize the needs to accommodate diverse cognitive profiles when fostering CT skills, recognizing that these cognitive functions can manifest as either strengths or limitations in different students. Consequently, understanding the connections between students’ cognitive functions and CT skills assumes pivotal importance in the design of personalized instructional strategies for CT. Despite a general consideration of learning variability in CT education, empirical insights exploring the correlation between cognitive skills and CT competencies remain notably scarce. This study endeavors to bridge this research gap by investigating the links between executive functions and CT skills, as well as the associations between their sub-dimensions. The results reveal a statistically significant correlation coefficient of 0.452 between these two domains, underscoring the notable connection between executive functions and CT abilities. Furthermore, the sub-dimensional analysis offers a comprehensive understanding of how specific executive functions uniquely contribute to certain CT skills. In light of these findings, this research offers a promising pathway for the development of tailored CT education programs that can cater to the unique needs of each individual, ultimately facilitating inclusive CT programs and making significant contributions to broaden STEM education and future workforce.}
}

@article{doi:10.3102/00346543241241327,
author = {Kathy A. Mills and Jen Cope and Laura Scholes and Luke Rowe},
title = {Coding and Computational Thinking Across the Curriculum: A Review of Educational Outcomes},
journal = {Review of Educational Research},
volume = {0},
number = {0},
pages = {00346543241241327},
year = {2024k},
doi = {10.3102/00346543241241327},
URL = {https://doi-org.crai.referencistas.com/10.3102/00346543241241327},
eprint = {https://doi-org.crai.referencistas.com/10.3102/00346543241241327},
abstract = {Teaching coding and computational thinking is an emerging educational imperative, now embedded in compulsory curriculum in the United States, Finland, the UK, Germany, Belgium, the Netherlands, New Zealand, and Australia. This meta-synthesis of 49 studies critically reviews recent international research (2009–2022) of coding and computational thinking as core and integrated across the curriculum. It addresses four essential problems: (a) What are the key features of learning environments that successfully develop students’ coding and computational thinking? (b) What is the impact of student engagement in coding and computational thinking on learning outcomes across curriculum areas? (c) What pedagogical constraints are evident for coding and computational thinking, including across curriculum areas? and (d) Which conceptual frameworks support coding and computational thinking, and what has been marginalized or excluded? The review advances knowledge of coding and computational thinking—vital to guide and develop future AI-based solutions to real-world problems that challenge disciplinary boundaries.}
}

@article{doi:10.1177/07356331231193142,
author = {Marta Peracaula-Bosch and Juan González-Martínez},
title = {Towards a Hermeneutics of Computational Thinking in Wing’s Approximations},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {8},
pages = {139–158},
year = {2024l},
doi = {10.1177/07356331231193142},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231193142},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231193142},
abstract = {In this article, we delve into a hermeneutic process that analyzes the term Computational Thinking as it was constructed through Wing’s series of iterations in conceptualization attempts (2006, 2008, 2011 and 2014). On the one hand, this brings us to analyze the relations and intersections between different process of thought (analytical, logical, mathematical, system, engineering, algorithmic) and the role of search for simplicity, generalization, and scalability in the layers of abstraction in Computational Thinking. On the other hand, we explore the roots and the discursive environment of authors that could contribute to this conceptualizing process in the years around its popularization following Jeannette Wing’s founding article in 2006. We have also included in our analysis the points of convergence with Seymour Papert’s work related to the computer-machine seen as an “object-to-think-with” helping to the construction of knowledge from an epistemological perspective to the computing-human. Even though a consensus on the definition of the concept has not yet ben encountered, the analysis helps to highlight the solid reference points that address what is at the core of Computational thinking and what should be the framework of educational interventions and research that revolve around it.}
}

@article{doi:10.1177/01614681221104043,
author = {Rose K. Pozos and Samuel Severance and Jill Denner and Kip Tellez},
title = {Exploring Design Principles in Computational Thinking Instruction for Multilingual Learners},
journal = {Teachers College Record},
volume = {124},
number = {5},
pages = {127–145},
year = {2022m},
doi = {10.1177/01614681221104043},
URL = {https://doi-org.crai.referencistas.com/10.1177/01614681221104043},
eprint = {https://doi-org.crai.referencistas.com/10.1177/01614681221104043},
abstract = {Background: Multilingual learners have been overlooked and understudied in computer science education research. As the CS for All movement grows, it is essential to design integrated, justice-oriented curricula that help young multilingual learners begin to develop computational thinking skills and discourses. Purpose: We present a conceptual framework and accompanying design principles for justice-centered computational thinking activities that are language-rich, with the aim of supporting learners’ agency and building their capacity over time to use computing for good in their communities. Setting: Our work takes place in a research–practice partnership centered in an elementary school in California with a significant multilingual Latinx population. Research Design: We have engaged in two cycles of design-based research with preservice and in-service teachers at an elementary school. Through analysis of one case study during the second and most recent cycle, we examined the potential of teachers using our design principles for supporting multilingual learners’ language development through engagement in computational thinking. Conclusions: Our findings suggest that multilingual learners will engage in productive discourse when computational thinking lessons are designed to (1) be meaningfully contextualized, (2) position students as agentic learners, and (3) promote coherence over time. However, more research is needed to understand how teachers use these principles over time, and what additional supports are needed to ensure coordination between stakeholders to develop and effectively implement coherent learning progressions.}
}

@article{doi:10.1177/07356331241226746,
author = {Yan Sun and Jamie Dyer and Jonathan Harris},
title = {Preparing Teachers for Teaching Spatial Computational Thinking With Integrated Data Viewer Visualization of Weather Data: A Discipline-Based Perspective of Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {4},
pages = {1061–1086},
year = {2024n},
doi = {10.1177/07356331241226746},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241226746},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241226746},
abstract = {This study was grounded in the spatial computational thinking model developed by the 3D Weather project funded by the NSF STEM+C program. The model reflects a discipline-based perspective towards computational thinking and captures the spatial nature of computational thinking in meteorology and the reliance of computational thinking on spatial thinking for geospatial analysis. The research was conducted among nineteen teachers attending the summer workshop offered by the project in its third project year to prepare them for teaching spatial computational thinking with IDV (Integrated Data Viewer, downloadable at https://www.unidata.ucar.edu/software/idv/) visualization of weather data. Quantitative survey data were collected measuring these teachers’ meteorology content knowledge, spatial computational thinking, self-efficacy for teaching spatial computational thinking, and epistemic cognition of teaching meteorology. The data were analyzed to examine the effects of the workshop in terms of these variables and the correlations among them were also explored.}
}

@article{doi:10.1177/0735633120972356,
author = {Meng-Jung Tsai and Jyh-Chong Liang and Chung-Yuan Hsu},
title = {The Computational Thinking Scale for Computer Literacy Education},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {4},
pages = {579–602},
year = {2021o},
doi = {10.1177/0735633120972356},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120972356},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120972356},
abstract = {Computational thinking has received tremendous attention from computer science educators and educational researchers in the last decade. However, most prior literature defines computational thinking as thinking outcomes rather than thinking processes. Based on Selby and Woodland’s framework, this study developed and validated the Computational Thinking Scale (CTS) to assess all students’ thought processes of computational thinking for both general and specific problem-solving contexts in five dimensions: abstraction, decomposition, algorithmic thinking, evaluation and generalization. A survey including 25 candidate items for CTS as well as demographic variables was administered to 388 junior high school students in Taiwan. An explorative factor analysis using the principal axis method with the oblimin rotation was used to validate the scale. Finally, 19 items were extracted successfully under the designed five dimensions, with a total explained variance of 64.03% and an overall reliability of 0.91. Results of the demographic comparisons showed that boys had a greater disposition than girls in decomposition thinking when solving problems using computer programming. In addition, programming learning experience, especially self-directed learning and after-school learning, had significant positive effects on all dimensions of CTS. Several future studies are suggested using this tool.}
}

@article{doi:10.1177/07356331211017794,
author = {Meng-Jung Tsai and Jyh-Chong Liang and Silvia Wen-Yu Lee and Chung-Yuan Hsu},
title = {Structural Validation for the Developmental Model of Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {1},
pages = {56–73},
year = {2022p},
doi = {10.1177/07356331211017794},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211017794},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211017794},
abstract = {A prior study developed the Computational Thinking Scale (CTS) for assessing individuals’ computational thinking dispositions in five dimensions: decomposition, abstraction, algorithmic thinking, evaluation, and generalization. This study proposed the Developmental Model of Computational Thinking through validating the structural relationships among the five factors of the CTS. To examine the model, a questionnaire including the CTS was administered to 472 middle school students. A confirmatory factor analysis was used to confirm the construct of the measurements, and a PLS-SEM analysis was used to validate the structural relationships among the factors. The results confirmed that the 19-item CTS has good item reliability, internal consistency, and construct reliability for measuring computational thinking (CT). In the Developmental Model of CT, decomposition and abstraction significantly predict all other three CT dispositions, suggesting that they are the two fundamental factors required for CT development. Moreover, a significant linear prediction path was shown starting from algorithmic thinking, evaluation, until generalization. Thus, a multi-level model was confirmed for the conceptual framework of CT. This model suggests a possible sequence for CT development which may provide a guideline for the teaching objectives of CT for different learning stages in different school levels. Decomposition and abstraction are especially suggested to be emphasized in school curricula before teaching algorithmic thinking or algorithm designs.}
}

@article{doi:10.1177/0735633120988807,
author = {Sheng-Yi Wu and Yu-Sheng Su},
title = {Visual Programming Environments and Computational Thinking Performance of Fifth- and Sixth-Grade Students},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {6},
pages = {1075–1092},
year = {2021q},
doi = {10.1177/0735633120988807},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120988807},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120988807},
abstract = {Currently, many countries actively cultivate students to develop computational thinking ability. Many visual programming environments (VPEs) and physical robot courses have been integrated into computational thinking learning in the elementary education stage. This study explores the relationship between the programming learning environment (including VPE, physical robots, and no experience) and the computational thinking ability of higher-grade elementary school students of different genders. The results show that learning through VPE or physical robots can help students improve their computational thinking ability and that students learn better via physical robots. In addition, among the four dimensions of computational thinking ability, most students are weak in algorithm design. In terms of gender, no differences exist in computational thinking ability. Further analysis reveals that female students have better decomposition performance in VPE learning, while male students have better algorithm design performance.}
}

@article{doi:10.1177/21582440241249897,
author = {Ting-Ting Wu and Andik Asmara and Yueh-Min Huang and Intan Permata Hapsari},
title = {Identification of Problem-Solving Techniques in Computational Thinking Studies: Systematic Literature Review},
journal = {Sage Open},
volume = {14},
number = {2},
pages = {21582440241249896},
year = {2024r},
doi = {10.1177/21582440241249897},
URL = {https://doi-org.crai.referencistas.com/10.1177/21582440241249897},
eprint = {https://doi-org.crai.referencistas.com/10.1177/21582440241249897},
abstract = {Problem-solving skills are an ability that must be cultivated to equip students with the skills needed to deal with today’s increasingly complex and volatile environment. Computational thinking represents a new paradigm in problem-solving skills. After Wing proposed Computational Thinking as problem-solving skills in 2006, other scholars investigated this topic; nevertheless, the link between Computational Thinking and problem-solving has not been clearly discussed in previous studies. To uncover evidence for the connection between Computational Thinking and problem-solving skills, we conduct a systematic literature review of 37 papers collected from Web of Science database. The results indicate that (a) problem-solving is discussed in the 37 articles in the context of Computational Thinking, (b) the most frequently employed Computational Thinking stages in problem-solving skills are decomposition, pattern recognition, abstraction, and algorithm, (c) Computational Thinking is closely linked to problem-solving, and (d) Computational Thinking and problem-solving stages serve the same functions in solving problems. The results of this study will encourage the development of education research, particularly in the application of CT as a problem-solving tool in various real-life scenarios.}
}

@article{doi:10.1177/07356331231220313,
author = {Ezgi Arzu Yurdakök and Filiz Kalelioğlu},
title = {The Effect of Teaching Physical Programming on Computational Thinking Skills and Self-Efficacy Perceptions Towards Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {3},
pages = {785–815},
year = {2024s},
doi = {10.1177/07356331231220313},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231220313},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231220313},
abstract = {The study examined the effect of teaching text-based programming with a physical programming tool on secondary school students’ computational thinking skills and self-efficacy perceptions. The study was conducted according to a sequential explanatory design as a mixed method research. The study group consisted of 85 secondary school students. Within the scope of the study, a physical programming tool called Micro:bit was used to teach Python programming for a period of 6 weeks. Data were collected using the Self-Efficacy Perception Scale for Computational Thinking Skill, Bebras: International Challenge on Informatics and Computational Thinking Tasks, tests focused on programming tool, concepts, and processes, and through semi-structured interview questioning. According to the findings obtained from pretests and posttests, a significant and positive difference was found in the students’ computational thinking skills and self-efficacy perceptions towards computational thinking skill. As a result of having received instruction in programming, the students satisfactorily learnt the required programming concepts and processes. Through learning Python programming with a physical programming tool, the students not only gained the skills required to write appropriate syntax, and to test and debug code, but they also learnt programming concepts such as variables, conditional expressions, loops, and functions.}
}

@article{doi:10.1177/07356331231160294,
author = {Ying Zhou and Ching Sing Chai and Xiuting Li and Chao Ma and Baoping Li and Ding Yu and Jyh-Chong Liang},
title = {Application of Metacognitive Planning Scaffolding for the Cultivation of Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {6},
pages = {1123–1142},
year = {2023t},
doi = {10.1177/07356331231160294},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231160294},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231160294},
abstract = {Computational thinking is a way of thinking that helps people “think like a computer scientist” to solve practical problems. However, practicing computational thinking through programming is dependent on the problem solvers’ metacognition. This study investigated students’ metacognitive planning and problem-solving performance in programming through two quantitative studies. First, we analyzed the performance of metacognitive planning and of problem solving through the programming of 21 freshmen, and found that the metacognitive planning performance related to “problem description” and “program comprehension” was significantly correlated with problem-solving performance. Second, semi-scaffolding and full-scaffolding were designed based on the first study. Another 89 freshmen were randomly divided into three groups and were asked to write their programming plan with no-scaffolding, semi-scaffolding, or with full-scaffolding. ANCOVA revealed that the problem-solving performance of the no-scaffolding group was significantly weaker than that of the other two groups, but there was no significant difference between the semi-scaffolding and the full-scaffolding groups. The study indicated that semi-scaffolding had a similar effect to full-scaffolding on problem-solving performance. The study suggests that teachers should emphasize supporting students’ “problem description” and “program comprehension” using semi-scaffolding. This scaffolding technique is sufficient and efficient for training students’ computational thinking through problem solving in programming.}
}

