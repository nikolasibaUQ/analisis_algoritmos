@article{doi:10.1177/07356331231165099,
author = {Yousri Attia Mohamed Abouelenein and Mohamed Ali Nagy Elmaadaway},
title = {Impact of Teaching a Neuro-Computerized Course Through VLE to Develop Computational Thinking Among Mathematics Pre-service Teachers},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {6},
pages = {1175–1206},
year = {2023a},
doi = {10.1177/07356331231165099},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231165099},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231165099},
abstract = {The current study aims to determine the effect of teaching a mechanic neuro-computerized course through virtual learning environments (VLE) to develop computational thinking among mathematics pre-service teachers. The neuro-computerized virtual learning environments (NCVLE) model was designed to be used to teach the mechanics course to third-year students of the mathematics department. To achieve the targeted learning outcomes, the study recruited (102) third-year students of the Faculty of Education and classified them into a control group of (50) students and an experimental group of (52) students. The experiment lasted for 14 weeks during one semester of the 2021-2022 academic year. The results agreed with most of what has been found from relevant literature and studies. Also, the results indicated that the NCVLE model played a vital role in the purposeful teaching, learning, and assessment processes and enhanced the learning of computational thinking.}
}

@article{doi:10.1177/0888406421992376,
author = {Emily C. Bouck and Phil Sands and Holly Long and Aman Yadav},
title = {Preparing Special Education Preservice Teachers to Teach Computational Thinking and Computer Science in Mathematics},
journal = {Teacher Education and Special Education},
volume = {44},
number = {3},
pages = {221–238},
year = {2021b},
doi = {10.1177/0888406421992376},
URL = {https://doi-org.crai.referencistas.com/10.1177/0888406421992376},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0888406421992376},
abstract = {Increasingly in K–12 schools, students are gaining access to computational thinking (CT) and computer science (CS). This access, however, is not always extended to students with disabilities. One way to increase CT and CS (CT/CS) exposure for students with disabilities is through preparing special education teachers to do so. In this study, researchers explore exposing special education preservice teachers to the ideas of CT/CS in the context of a mathematics methods course for students with disabilities or those at risk of disability. Through analyzing lesson plans and reflections from 31 preservice special education teachers, the researchers learned that overall emerging promise exists with regard to the limited exposure of preservice special education teachers to CT/CS in mathematics. Specifically, preservice teachers demonstrated the ability to include CT/CS in math lesson plans and showed understanding of how CT/CS might enhance instruction with students with disabilities via reflections on these lessons. The researchers, however, also found a need for increased experiences and opportunities for preservice special education teachers with CT/CS to more positively impact access for students with disabilities.}
}

@article{doi:10.1177/1476718X231175464,
author = {Kathleen Campana and J Elizabeth Mills},
title = {Playing, tinkering, and problem solving: Understanding early computational thinking in libraries and museums},
journal = {Journal of Early Childhood Research},
volume = {21},
number = {3},
pages = {369–383},
year = {2023c},
doi = {10.1177/1476718X231175464},
URL = {https://doi-org.crai.referencistas.com/10.1177/1476718X231175464},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1476718X231175464},
abstract = {Computational thinking (CT) has emerged as an important method in the United States for helping children learn to solve complex problems and develop skills necessary for coding and other computer science-related endeavors. Research has revealed that CT can be encouraged with children as young as 3–4 years of age. While some preschools and schools are incorporating CT into their curriculum for young children, ages 0–8 years, it is important to understand how environments outside of schools are using CT with young children, particularly given that, in the United States, a large percent of young children, ages 0–5 years, are not in formal school settings. This study provides insight into this area through 20 interviews with educators in libraries and museums to understand how they incorporate CT into their work with young children, ages 0–8 years, and their families. The interviews reveal that library and museum educators are using a variety of developmentally-appropriate approaches, such as play, experimentation, and narrative, to design and offer a diverse array of engaging, hands-on CT activities that allow young children to practice CT in child-centered, meaningful ways.}
}

@article{doi:10.1177/07356331221098793,
author = {Shiau-Wei Chan and Chee-Kit Looi and Weng Kin Ho and Mi Song Kim},
title = {Tools and Approaches for Integrating Computational Thinking and Mathematics: A Scoping Review of Current Empirical Studies},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {8},
pages = {2036–2080},
year = {2023d},
doi = {10.1177/07356331221098793},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221098793},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221098793},
abstract = {The importance of computational thinking (CT) as a 21st-century skill for future generations has been a key consideration in the reforms of many national and regional educational systems. Much attention has been paid to integrating CT into the traditional subject classrooms. This paper describes a scoping review of learning tools for integrating CT and mathematics in current empirical studies published from 2015 to 2021. The review showed that most of the studies implemented CT-intensive Math-connected integration. Five major types of CT tools had been identified, i.e., digital tangibles, apps and games, programming languages, formative or summative assessments, and other technological tools. In many instances, the tools also provide functions of assessment of CT skills. The most assessed CT competencies were including algorithms and algorithmic thinking, abstraction, testing and debugging, loops, and sequences. Geometry and Measurement was the most assessed mathematics topic. Our scoping review is beneficial in the investigation of the literature on CT and mathematics education, as well as guides those who are interested in developing curriculum, programs, or assessments that involve the integration of CT and mathematics.}
}

@article{doi:10.1177/07356331231205052,
author = {Chih-Hung Chen and Hsiang-Yu Chung},
title = {Fostering Computational Thinking and Problem-Solving in Programming: Integrating Concept Maps Into Robot Block-Based Programming},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {1},
pages = {406–427},
year = {2024e},
doi = {10.1177/07356331231205052},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231205052},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231205052},
abstract = {Computational thinking (CT) has gained considerable attention and in-depth discussion over the last two decades. Although the significance of CT has been highlighted, it could be challenging for educators to teach CT. Fortunately, adopting robots in education has been evidenced to be of benefit to promoting students’ learning motivation, CT, and higher-order thinking skills. However, several significant factors affecting students’ programming performances in robot-assisted learning activities have been identified, such as cognitive needs and organization. In this study, a CMR-BBP (concept map robot block-based programming) approach was designed by integrating concept maps into robot block-based programming to enhance students’ programming learning. Moreover, a three-group experiment was carried out in an elementary school to evaluate their learning outcomes. The experimental results revealed that the CMR-BBP approach benefited the students’ perceptions of their computational thinking and problem solving in comparison with the R-BBP (robot block-based programming) and C-BBP (conventional block-based programming) approaches. Furthermore, regarding cognitive load, both the CMR-BBP and R-BBP approaches enhanced the students’ germane cognitive load, while the CMR-BBP approach effectively reduced their extrinsic cognitive load. This study could be a notable reference for designing other courses in conjunction with programming learning activities.}
}

@article{doi:10.1177/07356331221114183,
author = {Li Cheng and Xiaoman Wang and Albert D. Ritzhaupt},
title = {The Effects of Computational Thinking Integration in STEM on Students’ Learning Performance in K-12 Education: A Meta-analysis},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {2},
pages = {416–443},
year = {2023f},
doi = {10.1177/07356331221114183},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221114183},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221114183},
abstract = {Computational thinking is believed to be beneficial for Science, Technology, Engineering, and Mathematics (STEM) learning as it is closely related to many other skills required by STEM disciplines. There has been an increasing interest in integrating computational thinking into STEM and many studies have been conducted to examine the effects of this intervention. This meta-analysis examined the effects of computational thinking integration in STEM on students’ STEM learning performance in the K-12 education context. Following systematic procedures, we identified 20 publications with 21 studies meeting the inclusion and exclusion criteria from a range of academic databases. We extracted effect sizes on student learning outcomes in one-group pretest-posttest designs. We also examined a range of moderating variables in the models, including student levels, STEM disciplines, intervention durations, alignment with content standards (e.g., CSTA/NGSS), types of intervention (e.g., simulation), and the use of unplugged/plugged activities. Overall, we found a statistically significant large effect size (g = 0. 85 [95% CI of 0.57–1.14]; p < .001), indicating a large overall effect of computational thinking integration on STEM learning outcomes. The effect sizes were significantly moderated by intervention durations. We provide a discussion of the findings and present implications for future research and practice.}
}

@article{doi:10.1177/0735633119872908,
author = {Pao-Nan Chou},
title = {Using ScratchJr to Foster Young Children’s Computational Thinking Competence: A Case Study in a Third-Grade Computer Class},
journal = {Journal of Educational Computing Research},
volume = {58},
number = {3},
pages = {570–595},
year = {2020g},
doi = {10.1177/0735633119872908},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633119872908},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633119872908},
abstract = {This study investigated young children’s computational thinking (CT) development by integrating ScratchJr into a programming curriculum. Twelve third graders (six males and six females) voluntarily participated in an experiment-based computer class conducted at a public elementary school in Taiwan. This study adopted a case study methodology to investigate research questions in one specific case (8-week CT educational training). A one-group quasi-experimental pretest and posttest design with the support of qualitative observation was used to examine four research topics: CT competence progress, programming behaviors in a CT framework, factors influencing CT competence, and learning responses to CT training. The quantitative results indicated that students immersing in weekly programming projects significantly improved in terms of their CT competence, which was mostly retained 1 month after completion of the class. The programming behaviors indicated that students’ CT concepts (sequence, event, and parallelism) and practice (testing and debugging as well as reusing and remixing) significantly improved. Moreover, parents’ active involvement in take-home assignments influenced students’ long-term CT competence retention. The qualitative results indicated that students enjoyed using tablet computers to learn ScratchJr programming and demonstrated various leaning behaviors in a three-stage instructional design model.}
}

@article{doi:10.1177/07356331211060470,
author = {Jian-Wen Fang and Dan Shao and Gwo-Jen Hwang and Shao-Chen Chang},
title = {From Critique to Computational Thinking: A Peer-Assessment-Supported Problem Identification, Flow Definition, Coding, and Testing Approach for Computer Programming Instruction},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {5},
pages = {1301–1324},
year = {2022h},
doi = {10.1177/07356331211060470},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211060470},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211060470},
abstract = {Scholars believe that computational thinking is one of the essential competencies of the 21st century and computer programming courses have been recognized as a potential means of fostering students’ computational thinking. In tradition instruction, PFCT (problem identification, flow definition, coding, and testing) is a commonly adopted procedure to guide students to learn and practice computer programming. However, without further guidance, students might focus on learning the syntax of computer programming language rather than the concept of solving problems. This study proposes a peer-assessment-supported PFCT (PA-PFCT) approach for boosting students’ computer programming knowledge and computational thinking awareness. A quasi-experiment was conducted on a computer programming course in a high school to evaluate its influence on students’ learning achievement, computational thinking awareness, learning motivation, and self-efficacy. An experimental group of 51 students learned with the proposed approach, while a control group of 49 students learned with the traditional PFCT (T-PFCT) approach. The experimental results show that the proposed approach significantly enhanced the students’ computational thinking awareness, learning motivation, and self-efficacy, while not having significant impacts on their computer programming knowledge test scores.}
}

@article{doi:10.1177/27527263231181963,
author = {Xiaoxuan Fang and Davy Tsz Kit Ng and Wing Tung Tam and Manwai Yuen},
title = {Integrating computational thinking into primary mathematics: A case study of fraction lessons with Scratch programming activities},
journal = {Asian Journal for Mathematics Education},
volume = {2},
number = {2},
pages = {220–239},
year = {2023i},
doi = {10.1177/27527263231181963},
URL = {https://doi-org.crai.referencistas.com/10.1177/27527263231181963},
eprint = {https://doi-org.crai.referencistas.com/10.1177/27527263231181963},
abstract = {We presented a design-based study within the context of a four-session Scratch programming activity among 23 fourth-grade students in Hong Kong. Inspired by the computational thinking (CT) strategies and the 5E instructional model, we investigated students’ mathematical learning of fractions in a Scratch (block-based programming) environment. Students developed CT concepts, practices, and perspectives by building a “fraction magic calculator” in groups. This study analyzed the lesson design, students’ drawings, interviews, and work expressing their mathematical understanding of fractions in Scratch applications. The learning tasks were designed to support the students’ fraction learning and utilized computational abstractions in the form of variables, functions, and iterations to formulate mathematical models in a programming context. Students’ artifacts and feedback showed they were interested in learning fractions in a programming learning context, contributing to exercising and improving their fraction concepts and CT. Ultimately, we emphasized the benefits of CT integrated into mathematics education, promoting students’ understanding of fraction concepts, a set of CT abilities (concepts, practices, perspectives), and learning motivation. Moreover, we suggested a set of non-cognitive skills (e.g., socializing, expressing) to enrich the CT perspectives in the framework and show the importance of developing coding communities to co-create digital artifacts among learners. Overall, we highlighted that mathematics teachers should apply and create learning tasks that promote computational thinking to forge mathematical ideas and thinking.}
}

@article{doi:10.1177/0735633121992480,
author = {Ting-Chia Hsu and Yi-Sian Liang},
title = {Simultaneously Improving Computational Thinking and Foreign Language Learning: Interdisciplinary Media With Plugged and Unplugged Approaches},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {6},
pages = {1184–1207},
year = {2021j},
doi = {10.1177/0735633121992480},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633121992480},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633121992480},
abstract = {This study proposed plugged and unplugged approaches for young students to simultaneously improve their interdisciplinary learning performance in English and Computational Thinking (CT). The plugged approach involved adopting educational robots to enhance CT and to provide English vocabulary and sentence practice via a board game. The unplugged version of the educational board game involved using a conventional board game without a computer, although it was designed for practicing CT as well as some foreign language vocabulary and conversational sentences. The results show that both approaches were helpful for simultaneously improving the students’ English proficiency of the target vocabulary and sentences, and their CT competence. The students’ foreign language learning anxiety during the English conversation in the plugged game was significantly lower than that of the students playing the unplugged game. On one hand, the cooperation tendency of the CT scale improved significantly for the students playing the unplugged game. On the other hand, the critical thinking of the CT scale improved significantly for those using the plugged approach. This research provides an innovation development and evaluation for plugged and unplugged approaches.}
}

@article{doi:10.1177/07356331241240670,
author = {Linlin Hu},
title = {Exploring Gender Differences in Computational Thinking Among K-12 Students: A Meta-Analysis Investigating Influential Factors},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {5},
pages = {1358–1384},
year = {2024k},
doi = {10.1177/07356331241240670},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241240670},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241240670},
abstract = {This study employs meta-analysis to synthesize findings from 30 articles investigating gender differences in computational thinking (CT) among K-12 students. Encompassing 51 independent effect sizes, the meta-analysis involves a participant pool of 9181 individuals from various countries, comprising 4254 males and 4927 females. Results indicate statistically significant gender differences in CT (Hedges’s g = 0.091, p < .05), albeit with a modest effect size, revealing higher CT scores among males compared to females. Further moderation analyses unveil the multifaceted nature of these gender differences. Specifically, while gender differences become significant during high school, recent studies suggest a gradual reduction in CT gender differences with societal progress among K-12 students. Moreover, findings illustrate variations in gender differences across geographical regions. Notably, while the overall gender disparity in CT is non-significant in the “East Asia and Pacific” region, it widens in “North America” and “Europe”, with males scoring higher than females. Conversely, in “Europe and Central Asia”, such gender differences present inconsistent outcomes, with females scoring higher than males. Importantly, assessment tool type does not significantly influence gender differences. Lastly, this study offers recommendations to address CT gender gaps, providing valuable insights for promoting gender equality in education.}
}

@article{doi:10.2190/EC.49.4.b,
author = {Byeongsu Kim and Taehun Kim and Jonghoon Kim},
title = {Paper-and-Pencil Programming Strategy toward Computational Thinking for Non-Majors: Design Your Solution},
journal = {Journal of Educational Computing Research},
volume = {49},
number = {4},
pages = {437–459},
year = {2013l},
doi = {10.2190/EC.49.4.b},
URL = {https://doi-org.crai.referencistas.com/10.2190/EC.49.4.b},
eprint = {https://doi-org.crai.referencistas.com/10.2190/EC.49.4.b},
abstract = {The paper-and-pencil programming strategy (PPS) is a way of representing an idea logically by any representation that can be created using paper and pencil. It was developed for non-computer majors to improve their understanding and use of computational thinking and increase interest in learning computer science. A total of 110 non-majors in their sophomore year were assigned to either a Logo or a PPS course with attendance being 2 hours per week for 15 weeks. To measure the effectiveness of PPS, the Group Assessment of Logical Thinking and a self-assessment survey pre- and post-test were used. Findings indicated that PPS not only improved students’ overall logical thinking as much as did Logo programming learning, but also increased scores on one more subscale of logical thinking than did the Logo course. In addition, PPS significantly helped students understand the concept of computational thinking and increased their interest in learning computer science.}
}

@article{doi:10.1177/07356331221133822,
author = {Ana Melro and Georgie Tarling and Taro Fujita and Judith Kleine Staarman},
title = {What Else Can Be Learned When Coding? A Configurative Literature Review of Learning Opportunities Through Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {4},
pages = {901–924},
year = {2023m},
doi = {10.1177/07356331221133822},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221133822},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221133822},
abstract = {Underpinning the teaching of coding with Computational Thinking has proved relevant for diverse learners, particularly given the increasing demand in upskilling for today’s labour market. While literature on computing education is vast, it remains unexplored how existing CT conceptualisations relate to the learning opportunities needed for a meaningful application of coding in non-Computer Scientists’ lives and careers. In order to identify and organise the learning opportunities in the literature about CT, we conducted a configurative literature review of studies published on Web of Science, between 2006 and 2021. Our sample gathers 34 papers and was analysed on NVivo to find key themes. We were able to organise framings of CT and related learning opportunities into three dimensions: functional, collaborative, and critical and creative. These dimensions make visible learning opportunities that range from individual cognitive development to interdisciplinary working with others, and to active participation in a technologically evolving society. By comparing and contrasting frameworks, we identify and explain different perspectives on skills. Furthermore, the three-dimensional model can guide pedagogical design and practice in coding courses.}
}

@article{doi:10.1177/07356331221121106,
author = {Mohd Kamal Othman and Syazni Jazlan and Fatin Afiqah Yamin and Shaziti Aman and Fitri Suraya Mohamad and Nurfarahani Norman Anuar and Abdulrazak Yahya Saleh and Ahmad Azaini Abdul Manaf},
title = {Mapping Computational Thinking Skills Through Digital Games Co-Creation           Activity Amongst Malaysian Sub-urban Children},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {2},
pages = {355–389},
year = {2023n},
doi = {10.1177/07356331221121106},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221121106},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221121106},
abstract = {This study investigates how digital game co-creation promotes Computational Thinking (CT) skills among children in sub-urban primary schools. Understanding how CT skills can be fostered in learning programming concepts through co-creating digital games is crucial to determine instructional strategies that match the young students’ interests and capacities. The empirical study has successfully produced a new checklist that can be used as a tool to describe the learning of CT skills when children co-create digital games. The checklist consists of 10 core CT skills: abstraction, decomposition, algorithmic thinking, generalisation, representation, socialisation, code literacy, automation, coordination, and debugging. Thirty-six 10–12 year-olds from sub-urban primary schools in Borneo participated in creating games in three separate eight-hour sessions. In addition, one pilot session with five participants was conducted. The game co-creation process was recorded to identify and determine how these young, inexperienced, untrained young learners collaborated while using CT skills. Analysis of their narratives while co-creating digital games revealed a pattern of using CT while developing the games. Although none of the groups demonstrated the use of all ten CTs, conclusively, all ten components of the CT were visibly present in their co-created digital games.}
}

@article{doi:10.1177/07356331231210946,
author = {Nikolaos Pellas},
title = {Assessing Computational Thinking, Motivation, and Grit of Undergraduate Students Using Educational Robots},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {2},
pages = {620–644},
year = {2024o},
doi = {10.1177/07356331231210946},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231210946},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231210946},
abstract = {Educational technologists and practitioners have made substantial strides in developing affordable digital and tangible resources to support both formal and informal computer science instruction. However, there is a lack of research on practice-based assignments, such as Internet of Things (IoT) projects, that allow undergraduate students to design and demonstrate educational robots using digital or physical assistance, especially when it comes to computational thinking (CT) and programming skills development in association with their psycho-emotional experience. This study compares the impact of Scratch and LEGO® WeDo robotic kits on students’ CT and programming skills development. A quasi-experimental approach was conducted, involving two hundred forty-six participants (n = 246), who were equally divided between Scratch and LEGO® WeDo groups. Results indicate that the LEGO® WeDo group showed greater improvement in CT and programming skills development, while designing and presenting IoT projects. Nevertheless, no significant association between motivation, grit, and CT skills was observed. The findings highlight the potential of tangible robotics in facilitating students’ hands-on learning and enhancing motivation to foster CT and programming skills. This study provides a wide range of implications for instructional designers on how to use tangible robotics to support hands-on IoT projects in computer science courses.}
}

@article{doi:10.1177/10567879221076077,
author = {Papadakis Stamatios},
title = {Can Preschoolers Learn Computational Thinking and Coding Skills with ScratchJr? A Systematic Literature Review},
journal = {International Journal of Educational Reform},
volume = {33},
number = {1},
pages = {28–61},
year = {2024p},
doi = {10.1177/10567879221076077},
URL = {https://doi-org.crai.referencistas.com/10.1177/10567879221076077},
eprint = {https://doi-org.crai.referencistas.com/10.1177/10567879221076077},
abstract = {Computational Thinking (CT) and the understanding of how programs are being executed is internationally acknowledging as a necessity for today’s students and citizens of tomorrow. Despite the multifaceted nature of CT, the introduction of CT and associate concepts such as coding is regarded as developmental acceptable for preschool and kindergarten children. For a decade, there has been a focus on educational reform in the form of educational apps. For young children, an influx of mobile apps offering various interfaces and styles promote themselves as having educational value to introduce children aged 5–7 to essential CT, coding, and problem-solving skills. On the contrary, little is known about the educational value of these apps. The fast pace at which developers produce these apps and the breadth of the available apps have gone beyond what it is reasonable for researchers and experts in the domain to evaluate. This article presents a literature review on how the ScratchJr app affects young children’s CT, coding, and general literacy skills. The literature review includes 18 studies. The main conclusion is that although ScratchJr is not a panacea, it seems to be a helpful app that positively affects children’s CT and coding skills.}
}

@article{doi:10.1177/07356331231210560,
author = {Yu-Sheng Su and Shuwen Wang and Xiaohong Liu},
title = {Using Epistemic Network Analysis to Explore Primary School Students’ Computational Thinking in Pair Programming Learning},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {2},
pages = {559–593},
year = {2024q},
doi = {10.1177/07356331231210560},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231210560},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231210560},
abstract = {Pair programming (PP) can help improve students’ computational thinking (CT), but the trajectory of CT skills and the differences between high-scoring and low-scoring students in PP are unknown and need further exploration. In this study, a total of 32 fifth graders worked on Scratch tasks in 16 pairs. The group discourse of three learning topics (comprising 9 projects) was collected. After the audio files were transcribed, 1,303 conversations were obtained. They were analyzed via Epistemic Network Analysis (ENA) Webkit, which can reveal the trajectory of students’ CT development via analyzing codes of discourse related to CT in PP. Three Scratch learning topics were assessed based on the Dr. Scratch platform to acquire the level of students’ CT and to determine the low- and high-scoring groups. Results indicated that CT concepts and CT practices were always closely related in PP and CT practices, and CT perspectives could be gradually and closely related after a long period of CT training. A significant difference between the two groups’ CT structures was found. The high-scoring group had more fragments of CT practice and connecting of CT perspectives, while the low-scoring group showed more fragments of CT concepts and expressing of CT perspectives. This research provides insights into cultivating primary school students’ CT using Scratch in the context of PP. The findings can provide suggestions for instructors to design instructional interventions to facilitate students’ CT skills via PP learning. Instructors can improve CT skills by guiding students to constantly ask questions, and specifying the role swap between driver and navigator in PP. Besides, instructors could give more consideration to the development of CT perspectives, and especially the ability to question.}
}

@article{doi:10.1177/09610006221084126,
author = {Mega Subramaniam and Nitzan Koren and Shandra Morehouse and David Weintrop},
title = {Capturing computational thinking in public libraries: An examination of assessment strategies, audience, and mindset},
journal = {Journal of Librarianship and Information Science},
volume = {55},
number = {2},
pages = {358–370},
year = {2023r},
doi = {10.1177/09610006221084126},
URL = {https://doi-org.crai.referencistas.com/10.1177/09610006221084126},
eprint = {https://doi-org.crai.referencistas.com/10.1177/09610006221084126},
abstract = {This study examines the current state of assessment of computational thinking (CT) programming in public libraries in the United States. In particular, this study identifies the assessment tools and strategies that public library staff use to evaluate the success of CT youth programming, as well as how they share these assessment results, what they share, and with whom. This work also examines the perceptions of library staff on assessment of CT learning in libraries. Through our work, we highlight the need for a change of mindset in the perception of library staff toward assessment of CT learning in libraries. We also demonstrate the need for suitable assessment strategies to measure learning in CT programming in libraries beyond attendance and retention, that communicate to library staff on how they can revise their programs and to share their program impact with library stakeholders who make decisions on budget and resource allocations.}
}

@article{doi:10.1177/07356331241227793,
author = {Chen Sun and Stephanie Yang and Betsy Becker},
title = {Debugging in Computational Thinking: A Meta-analysis on the Effects of Interventions on Debugging Skills},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {4},
pages = {1087–1121},
year = {2024s},
doi = {10.1177/07356331241227793},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241227793},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241227793},
abstract = {Computational thinking (CT), an essential 21st century skill, incorporates key computer science concepts such as abstraction, algorithms, and debugging. Debugging is particularly underrepresented in the CT training literature. This multi-level meta-analysis focused on debugging as a core CT skill, and investigated the effects of various debugging interventions. Moderator analyses revealed which interventions were effective, in which situations, and for what kind of learner. A significant overall mean effect of debugging interventions ( = 0.64, CI = (0.32, 0.96), p < .001), was found based on 62 effect sizes from 18 source articles. Significant between-studies variation indicated that true effects could range from −0.54 to 1.82. In addition, sensitivity analyses and checks on confounding provided further understandings of intervention features and their impacts. Interventions using enhanced debuggers and systematic instruction were particularly effective in fostering debugging skills. Debugging intervention effects varied by participant population and potentially by publication type. Moreover, debugging interventions had impact regardless of how debugging skills were measured, programming medium used, control-group type, and whether the study was randomized. Future studies should investigate the best practices for improving debugging abilities for whom and under what circumstances.}
}

@article{doi:10.1177/07356331211035182,
author = {Lihui Sun and Linlin Hu and Danhua Zhou},
title = {Single or Combined? A Study on Programming to Promote Junior High School Students’ Computational Thinking Skills},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {2},
pages = {283–321},
year = {2022t},
doi = {10.1177/07356331211035182},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211035182},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211035182},
abstract = {In this work, we studied the influence of different programming approaches on the development of students’ computational thinking (CT) skills, the programming experience and gender differences in CT development were also discussed. A total of 158 junior high school students and one teacher participated in the study over 5 months. The sample students were divided into four experimental groups in four single or combined programming approaches (i.e., plugged-in, unplugged, unplugged first, and plugged-in first) and one control group without programming. Data sources included the results of four CT tests, as well as interviews with the teacher and surveys with 24 representative participants. The results showed that the four programming approaches can effectively improve students’ CT skills and can be retained after two months. Among them, the form of implementing unplugged activities before plugged-in can most effectively improve CT skills, and can better weaken the impact of previous programming experience. Finally, the qualitative analysis results provided insights into the process of programming and CT education. These findings will provide implications for the introduction of CT in junior high school, and help expand students’ participation in computing.}
}

@article{doi:10.1177/07356331211051043,
author = {Meng-Jung Tsai and Francis Pingfan Chien and Silvia Wen-Yu Lee and Chung-Yuan Hsu and Jyh-Chong Liang},
title = {Development and Validation of the Computational Thinking Test for Elementary School Students (CTT-ES): Correlate CT Competency With CT Disposition},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {5},
pages = {1110–1129},
year = {2022u},
doi = {10.1177/07356331211051043},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211051043},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211051043},
abstract = {This study aimed to develop the Computational Thinking Test for Elementary School Students (CTT-ES) to assess young children’s CT competencies in non-programming contexts and also examine the relationship between CT competencies and CT dispositions. A survey including a pool of CTT-ES candidate items and the Computational Thinking Scale (CTS) was administered to 631 elementary school students. Rasch model of the Item Response Theory and the discrimination analysis of the Classical Testing Theory were conducted for item analyses. Pearson’s correlation analyses and hierarchical multiple regression analyses were used to examine the relationships between CTT-ES and CTS scores. The results showed that the final CTT-ES including 16 items had a good fitness, discrimination, and reliability to evaluate elementary students’ domain-general CT competencies. The convergent validity of CTT-ES was confirmed by its significant correlations with the CTS scores. The significant regression model not only showed students’ CT competencies can be predicted by their CT dispositions but also supported The Developmental Model of CT. This study provided a valid and reliable tool for assessing young children’s CT abilities. It also furthered our understanding about the developmental orders of CT abilities and contributed to the theoretical construction of CT.}
}

@article{doi:10.1177/07356331241236744,
author = {Xiaowen Wang and Kan Kan Chan and Qianru Li and Shing On Leung},
title = {Do 3–8 Years Old Children Benefit From Computational Thinking Development? A Meta-Analysis},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {5},
pages = {1182–1208},
year = {2024v},
doi = {10.1177/07356331241236744},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241236744},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241236744},
abstract = {The interest in Computational Thinking (CT) development among young learners increases with the number of studies located in literature. In this study, a meta-analysis was conducted to address two main objectives: (a) the effectiveness of empirical interventions on the development of CT in children aged of 3–8 years; and (b) the variables that influence the effectiveness of the interventions. Following PRISMA procedures, we identified 17 empirical studies with 34 effect sizes and 1665 participants meeting the inclusion criteria from Web of Science database. Overall, we found a statistically significant large effect size (d = .83 [95% CI: 730, .890]; p < .001) on the CT development of 3–8 years old children, which provides empirical support for having young children to engage in CT experiences. The effect size was significantly influenced by moderating variables including gender, scaffolding, and education level. Intervention length showed a marginally significant effect. Therefore, educators could refer to the significant moderators when designing tailored interventions for CT development in early childhood education while a call for more empirical studies of CT development in young children is proposed.}
}

@article{doi:10.1177/07356331211039961,
author = {Ting-Ting Wu and Jian-Ming Chen},
title = {Combining Webduino Programming With Situated Learning to Promote Computational Thinking, Motivation, and Satisfaction Among High School Students},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {3},
pages = {631–660},
year = {2022w},
doi = {10.1177/07356331211039961},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211039961},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211039961},
abstract = {Many countries have incorporated computational thinking (CT) and programming languages into their science and technology courses. Students can improve their CT ability by learning programming languages. Moreover, situated learning enables students to generate knowledge and master problem-solving skills through interaction with situations. This study incorporated Webduino learning and the situated learning strategy into a programming course and analyzed its impact on high school students’ CT ability, learning motivation, and course satisfaction. A quasi-experimental research method was adopted, wherein the experimental group was subjected to the situated learning strategy and the control group was subjected to a traditional teaching method. The study results revealed that integrating Webduino programming with situated learning could effectively improve five categories of CT skills; moreover, the activity models of situated learning enhanced the value and expectation dimensions of learning motivation. In addition, satisfaction with the course content and self-identity slightly improved. However, because teachers were required to elaborate on stories to promote learner engagement with life situations, the time available for programming was limited. Thus, no significant difference was observed in teaching satisfaction.}
}

@article{doi:10.1177/07356331211057143,
author = {Zehui Zhan and Wenchang He and Xitian Yi and Shuyao Ma},
title = {Effect of Unplugged Programming Teaching Aids on Children’s Computational Thinking and Classroom Interaction: with Respect to Piaget’s Four Stages Theory},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {5},
pages = {1277–1300},
year = {2022x},
doi = {10.1177/07356331211057143},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211057143},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211057143},
abstract = {This paper examined the effect of the Unplugged Programming Teaching Aids (UPTA) on students’ computational thinking and classroom interaction. A set of UPTA was created and used in a primary school in southern China. A total of 48 students aged 6–8 were assigned to two classes, with the same instructor and learning materials, but only the treatment group was provided with the UPTA. Both groups were tested on computational thinking ability, children’s concrete operation status, degree of ego-centricity, and in-classroom interaction. Results indicated that the children aged 6–8 years old could classify things according to two kinds of criteria at the same time, but their cognitive style was still ego-centered and they found it difficult to deal with problems from a third-party perspective, no matter whether in the treatment group or the control group. However, students in the treatment group achieved significantly higher scores on the test of computational thinking and were more engaged in the classroom interaction patterns. These findings provide evidence of the positive effect of the UPTA on promoting children’s computational thinking by guiding them to decompose and solve problems, as well as enhancing their interaction and communication in the classroom, so as to transform from simple imitation to collaborative inquiry.}
}

@article{doi:10.1177/07356331241268474,
author = {Ruijie Zhou and Chong Xie and Xiuling He and Yangyang Li and Qiong Fan and Ying Yu and Zhonghua Yan},
title = {Effect of Different Flow Design Approaches on Undergraduates’ Computational Thinking During Pair Programming},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {7},
pages = {1865–1895},
year = {2024y},
doi = {10.1177/07356331241268474},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241268474},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241268474},
abstract = {Computational thinking (CT), an essential competency for comprehending and addressing intricate issues in the digital world, has been incorporated into curriculum planning as a goal for programming education. This study introduced flow design into programming curricula to investigate its impact on undergraduates ’CT skills during pair work. Two types of flow design approaches, construct-by-self flow design (CBS-FD) and construct-on-scaffold flow design (COS-FD), were proposed to determine which approach better enhances students’ CT skills. Seventy-six first-year undergraduates participated, including thirty in the CBS group and thirty-six in the COS group. Evaluations made from the results and processes of programming tasks were employed to describe computational performance and computational practices, respectively. Data gathered from CT skill surveys were thoroughly analyzed to gain a deeper understanding of computational perspectives. Our findings highlighted that COS-FD significantly improved participants’ computational performance compared with CBS-FD. The COS groups fostered an engaging, sharing atmosphere, while CBS groups spent more energy on negotiating the manipulation of flow design. Moreover, both COS-FD and CBS-FD proved beneficial in enhancing participants’ computational perspectives, with the COS groups better improving their algorithm thinking. The study presents valuable perspectives on the design and implementation of collaborative programming activities within curriculum education.}
}

